// import axios from "axios";
// import { useEffect, useState } from "react";
// import { Link } from "react-router-dom";

// const apiUrl = import.meta.env.VITE_API_URL;

// function Home() {
//   const [posts, setPosts] = useState([]);
//   const [page, setPage] = useState(1);
//   const [hasMore, setHasMore] = useState(true);
//   const [loading, setLoading] = useState(false);

//   const fetchPosts = () => {
//     setLoading(true);
//     axios.get(`${apiUrl}/getposts?page=${page}`)
//       .then(res => {
//         if (Array.isArray(res.data)) {
//           if (res.data.length === 0) {
//             setHasMore(false); // –±–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ –≥—Ä—É–∑–∏—Ç—å
//           } else {
//             setPosts(prev => {
//                 const existingIds = new Set(prev.map(p => p._id));
//                 const newPosts = res.data.filter(post => !existingIds.has(post._id));
//                 return [...prev, ...newPosts];
//               });
//             setPage(prev => prev + 1);
//           }
//         }
//         setLoading(false);
//       })
//       .catch(err => {
//         console.error(err);
//         setLoading(false);
//       });
//   };

//   useEffect(() => {
//     alert("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –∏–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ '–æ–¥–∞—Ä—ë–Ω–Ω—ã—Ö' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 90 —Å–µ–∫—É–Ω–¥.");
//     fetchPosts(); // –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
//   }, []);

//   return (
//     <div className="posts_container">
//       {
//         posts.map(post => (
//           <Link key={post._id} to={`/post/${post._id}`} className="post">
//             <div className="post-item">
//               <img src={post.file} alt="" />
//               <div className="post_text">
//                 <h2>{post.title}</h2>
//                 <p className="post-item-email">–ê–≤—Ç–æ—Ä: <b>{post.username}</b></p>
//                 <p className="post-text">{post.description}</p>
//               </div>
//             </div>
//           </Link>
//         ))
//       }

//       {hasMore && (
//         <div style={{ textAlign: "center", marginTop: "20px" }}>
//           <button onClick={fetchPosts} disabled={loading}>
//             {loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"}
//           </button>
//         </div>
//       )}
//     </div>
//   );
// }

// export default Home;

// import axios from "axios"
// import { useEffect, useState } from "react"
// import { Link } from "react-router-dom"

// const apiUrl = import.meta.env.VITE_API_URL;

// function Home() {
//     const [posts, setPosts] = useState([]);
//     const [showNotice, setShowNotice] = useState(true);
  
//     useEffect(() => {
//       // –°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
//       const timeout = setTimeout(() => setShowNotice(false), 50000);
  
//       axios.get(`${apiUrl}/getposts`)
//         .then(res => {
//           console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", res.data);
//           if (Array.isArray(res.data)) {
//             setPosts(res.data);
//           } else {
//             console.error("–û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤, –Ω–æ –ø—Ä–∏—à–ª–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ:", res.data);
//             setPosts([]);
//           }
//         })
//         .catch(err => console.log(err));
  
//       return () => clearTimeout(timeout);
//     }, []);
  
//     return (
//       <div className="posts_container">
//         {showNotice && (
//           <div className="notice">
//             ‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 90 —Å–µ–∫—É–Ω–¥ –∏–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Å–æ–±–æ ¬´–æ–¥–∞—Ä—ë–Ω–Ω—ã—Ö¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π :)
//           </div>
//         )}
//         {posts.map(post => (
//           <Link key={post._id} to={`/post/${post._id}`} className="post">
//             <div className="post-item">
//               <img src={post.file} alt="" />
//               <div className="post_text">
//                 <h2>{post.title}</h2>
//                 <p className="post-item-email">–ê–≤—Ç–æ—Ä: <b>{post.username}</b></p>
//                 <p className="post-text">{post.description}</p>
//               </div>
//             </div>
//           </Link>
//         ))}
//       </div>
//     );
//   }
  
//   export default Home;

// import { useEffect, useState } from "react";
// import axios from "axios";
// import { Link } from "react-router-dom";

// const apiUrl = import.meta.env.VITE_API_URL;

// function Home() {
//   const [posts, setPosts] = useState([]);
//   const [page, setPage] = useState(1);
//   const [hasMore, setHasMore] = useState(true);
//   const [loading, setLoading] = useState(false);
//   const [showNotice, setShowNotice] = useState(true);

//   const fetchPosts = () => {
//     if (loading) return;
//     setLoading(true);
    
//     axios.get(`${apiUrl}/getposts?page=${page}`)
//       .then(res => {
//         if (Array.isArray(res.data)) {
//           if (res.data.length === 0) {
//             setHasMore(false);
//           } else {
//             const existingIds = new Set(posts.map(p => p._id));
//             const newPosts = res.data.filter(post => !existingIds.has(post._id));
//             setPosts(prev => [...prev, ...newPosts]);
//             setPage(prev => prev + 1);
//           }
//         }
//         setLoading(false);
//       })
//       .catch(err => {
//         console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤:", err);
//         setLoading(false);
//       });
//   };

//   useEffect(() => {
//     const timeout = setTimeout(() => setShowNotice(false), 90000);
//     fetchPosts(); // –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞

//     return () => clearTimeout(timeout);
//   }, []);

//   return (
//     <div className="posts_container">
//       {showNotice && (
//         <div className="notice">
//           ‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ <b>90 —Å–µ–∫—É–Ω–¥</b> –∏–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Å–æ–±–æ ¬´–æ–¥–∞—Ä—ë–Ω–Ω—ã—Ö¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üôÇ
//         </div>
//       )}

//       {posts.map(post => (
//         <Link key={post._id} to={`/post/${post._id}`} className="post">
//           <div className="post-item">
//             <img src={post.file} alt="" />
//             <div className="post_text">
//               <h2>{post.title}</h2>
//               <p className="post-item-email">–ê–≤—Ç–æ—Ä: <b>{post.username}</b></p>
//               <p className="post-text">{post.description}</p>
//             </div>
//           </div>
//         </Link>
//       ))}

//       {hasMore && (
//         <div style={{ textAlign: "center", marginTop: "20px" }}>
//           <button onClick={fetchPosts} disabled={loading}>
//             {loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"}
//           </button>
//         </div>
//       )}
//     </div>
//   );
// }

// export default Home;

import { useEffect, useState, useRef, useCallback } from "react";
import axios from "axios";
import { Link } from "react-router-dom";

const apiUrl = import.meta.env.VITE_API_URL;

function Home() {
  const [posts, setPosts] = useState([]);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);
  const [loading, setLoading] = useState(false);
  const [showNotice, setShowNotice] = useState(true);

  const observer = useRef();

  const lastPostRef = useCallback(node => {
    if (loading) return;
    if (observer.current) observer.current.disconnect();

    observer.current = new IntersectionObserver(entries => {
      if (entries[0].isIntersecting && hasMore) {
        fetchPosts();
      }
    });

    if (node) observer.current.observe(node);
  }, [loading, hasMore]);

  const fetchPosts = () => {
    setLoading(true);
    axios.get(`${apiUrl}/getposts?page=${page}`)
      .then(res => {
        if (Array.isArray(res.data)) {
          if (res.data.length === 0) {
            setHasMore(false);
          } else {
            const existingIds = new Set(posts.map(p => p._id));
            const newPosts = res.data.filter(post => !existingIds.has(post._id));
            setPosts(prev => {
              const existingIds = new Set(prev.map(p => p._id)); // –≤—Å–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ id
              const filteredNew = newPosts.filter(post => !existingIds.has(post._id)); // –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª–∏ –ø–æ–≤—Ç–æ—Ä—ã
              return [...prev, ...filteredNew]; // –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
            });
            setPage(prev => prev + 1);
          }
        }
        setLoading(false);
      })
      .catch(err => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤:", err);
        setLoading(false);
      });
  };

  useEffect(() => {
    const timeout = setTimeout(() => setShowNotice(false), 10000);
    fetchPosts(); // –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    return () => clearTimeout(timeout);
  }, []);

  return (
    <div className="posts_container">
      {showNotice && (
        <div className="notice">
          ‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ <b>90 —Å–µ–∫—É–Ω–¥</b> –∏–∑-–∑–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Å–æ–±–æ ¬´–æ–¥–∞—Ä—ë–Ω–Ω—ã—Ö¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üôÇ
        </div>
      )}

      {posts.map((post, index) => {
        const isLast = index === posts.length - 1;
        return (
          <Link key={post._id} to={`/post/${post._id}`} className="post">
            <div className="post-item" ref={isLast ? lastPostRef : null}>
              <img src={post.file} alt="" />
              <div className="post_text">
                <h2>{post.title}</h2>
                <p className="post-item-email">–ê–≤—Ç–æ—Ä: <b>{post.username}</b></p>
                <p className="post-text">{post.description}</p>
              </div>
            </div>
          </Link>
        );
      })}

      {loading && (
        <div style={{ textAlign: "center", margin: "20px", fontWeight: "bold" }}>
          –ó–∞–≥—Ä—É–∑–∫–∞...
        </div>
      )}
    </div>
  );
}

export default Home;